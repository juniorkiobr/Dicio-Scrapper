"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.imagesFromParseResult = exports.featureImageFromParseResult = void 0;
const types_1 = require("./types");
const defaultRankAlgorithm = (imageMetadata) => {
    /**
     * Immediately down rank images with no `src` attribute; this is a failure condition
     */
    if (!imageMetadata.src) {
        return -1;
    }
    let score = 0;
    /**
     * Weigh image based on source, with open graph images ranking highest
     */
    switch (imageMetadata.sourceType) {
        case types_1.ImageSource.OpenGraph:
            score += 2;
            break;
        case types_1.ImageSource.LinkedData:
            score += 1;
            break;
    }
    /**
     * Weigh image based on dimensions
     */
    if (imageMetadata.width && imageMetadata.height) {
        score += 1;
    }
    return score;
};
function featureImageFromParseResult(result, options = {}) {
    var _a;
    return (_a = imagesFromParseResult(result, options).shift()) !== null && _a !== void 0 ? _a : null;
}
exports.featureImageFromParseResult = featureImageFromParseResult;
function imagesFromParseResult(result, options = {}) {
    var _a, _b, _c, _d, _e, _f;
    let images = [];
    if (result.linkedData) {
        // @ts-ignore - type is not being inferred but is SchemaValue<ImageObject | URL | IdReference, "image">
        const { image } = result.linkedData;
        if (Array.isArray(image)) {
            for (const img of image) {
                if (typeof img === "string") {
                    images.push({
                        width: 0,
                        height: 0,
                        src: img,
                        sourceType: types_1.ImageSource.LinkedData,
                    });
                }
                else {
                    const width = parseInt((_a = img.width) !== null && _a !== void 0 ? _a : 0);
                    const height = parseInt((_b = img.height) !== null && _b !== void 0 ? _b : 0);
                    const src = img.contentUrl;
                    images.push({
                        width,
                        height,
                        src,
                        sourceType: types_1.ImageSource.LinkedData,
                    });
                }
            }
        }
        else if (typeof image === "string") {
            images.push({
                width: 0,
                height: 0,
                src: image,
                sourceType: types_1.ImageSource.LinkedData,
            });
        }
        else {
            const width = parseInt((_c = image.width) !== null && _c !== void 0 ? _c : 0);
            const height = parseInt((_d = image.height) !== null && _d !== void 0 ? _d : 0);
            const src = image.contentUrl;
            images.push({
                width,
                height,
                src,
                sourceType: types_1.ImageSource.LinkedData,
            });
        }
    }
    if (result.openGraph.ogImage) {
        const image = result.openGraph.ogImage;
        if (typeof image === "string") {
            /**
             * Handle type string
             */
            images.push({
                width: 0,
                height: 0,
                src: image,
                sourceType: types_1.ImageSource.OpenGraph,
            });
        }
        else if (Array.isArray(image)) {
            /**
             * Handle Array<ImageObject | string>
             */
            for (const img of image) {
                let width = 0;
                let height = 0;
                let src;
                if (typeof img === "string") {
                    src = img;
                }
                else {
                    src = img.url;
                    width = parseInt(`${img.width}`);
                    height = parseInt(`${img.height}`);
                }
                images.push(Object.assign(Object.assign({}, img), { width,
                    height,
                    src, sourceType: types_1.ImageSource.OpenGraph }));
            }
        }
        else {
            /**
             * Handle type ImageObject
             *
             */
            let width = parseInt(`${image.width}`);
            let height = parseInt(`${image.height}`);
            let src = image.url;
            images.push(Object.assign(Object.assign({}, image), { width,
                height,
                src, sourceType: types_1.ImageSource.OpenGraph }));
        }
    }
    const tags = result.document("img");
    for (const tag of tags) {
        const width = parseInt((_e = tag.attribs["width"]) !== null && _e !== void 0 ? _e : 0);
        const height = parseInt((_f = tag.attribs["height"]) !== null && _f !== void 0 ? _f : 0);
        const src = tag.attribs["src"];
        images.push({
            width,
            height,
            src,
            sourceType: types_1.ImageSource.DOM,
        });
    }
    return sortedByRank(images, options.rankImage);
}
exports.imagesFromParseResult = imagesFromParseResult;
function sortedByRank(images, rankImage = defaultRankAlgorithm) {
    let ranked = [];
    for (const image of images) {
        ranked.push(Object.assign(Object.assign({}, image), { rank: rankImage(image) }));
    }
    return ranked.sort((a, b) => b.rank - a.rank);
}
